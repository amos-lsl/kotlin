//
// Let we have this depend module groups:
//
//  RB -> RA
//  A -> RA
//  B -> RB
//  B -> A
//  R -> B (and R -> A, transitively)
//
// RA and RB is regular module groups.
// Each group contains 2 jvm and 2 js regular modules (server and client).
//
// A and B is multiplatform module groups. This cases are covered:
// - one platform module provide actual definitions for two common modules
// - one common module has actual declarations for 2 jvm and 2 js platforms (server and client)
// Therefore each module group itself contains 3 module subgroups: common, jvm and js modules.
// Each of which, in turn, contains common, client and server modules.
//
// R is regular module depends on B (and on A, transitively)
//

//////  RA //////

raJvm [jvm, edit]
raJs [js, edit]

////// RB //////

rbJvm [jvm]
rbJvm -> raJvm [compile, exported]

rbJs [js]
rbJs -> raJs [compile, exported]

////// A //////

aCommon [common, edit, editExpectActual]

aCommonClient [common]
aCommonClient -> aCommon [compile, exported]

aCommonServer [common]
aCommonServer -> aCommon [compile, exported]

aJvmClient [jvm, edit, editJvm]
aJvmClient -> aCommon [expectedBy]
aJvmClient -> aCommonClient [expectedBy]
aJvmClient -> raJvm [compile, exported]

aJvmServer [jvm]
aJvmServer -> aCommon [expectedBy]
aJvmServer -> aCommonServer [expectedBy]
aJvmServer -> raJvm [compile, exported]

aJsClient [js, edit]
aJsClient -> aCommon [expectedBy]
aJsClient -> aCommonClient [expectedBy]
aJsClient -> raJs [compile, exported]

aJsServer [js]
aJsServer -> aCommon [expectedBy]
aJsServer -> aCommonServer [expectedBy]
aJsServer -> raJs [compile, exported]

////// B //////

bCommon [common, editExpectActual]
bCommon -> aCommon [compile, exported]

bCommonClient [common, edit, editJvm]
bCommonClient -> bCommon [compile, exported]
bCommonClient -> aCommonClient [compile, exported]

bJvmClient [jvm]
bJvmClient -> bCommon [expectedBy]
bJvmClient -> bCommonClient [expectedBy]
bJvmClient -> aJvmClient [compile, exported]
bJvmClient -> rbJvm [compile, exported]

bJsClient [js]
bJsClient -> bCommon [expectedBy]
bJsClient -> bCommonClient [expectedBy]
bJsClient -> aJsClient [compile, exported]
bJsClient -> rbJs [compile, exported]

////// R //////

rJvmClient [jvm, edit]
rJvmClient -> bJvmClient [compile, exported]

rJsClient [js, edit]
rJsClient -> bJsClient [compile, exported]